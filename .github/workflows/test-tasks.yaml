name: ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  list-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.output-images.outputs.images }}
    steps:
      - uses: actions/checkout@v4
      - name: list images
        id: output-images
        run: |
          echo "images=$(ls images | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: list-images
    strategy:
      matrix:
        image: ${{fromJSON(needs.list-images.outputs.images)}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            images/${{ matrix.image }}/**
      - name: changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo ${{ steps.changed-files.outputs.any_changed }}
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"
      - name: Log in to the Container registry
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.image }}
      - name: Build and push Docker image
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name != 'pull_request'
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56
        with:
          context: images/${{ matrix.image }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        pipeline-version:
        - v0.50.5
        - v0.53.3
        - latest
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    # instantiate a KinD (Kubernetes in Docker) cluster, installs `kubectl` and configures the
    # `kubeconfig` to reach the local cluster
    - uses: helm/kind-action@v1.8.0
      with:
        cluster_name: kind
        wait: 120s
    # installs Tekton Pipelines and `tkn` command line, including a local Container-Registry with
    # settings to reach it during testing
    - uses: openshift-pipelines/setup-tektoncd@v1
      with:
        pipeline_version: ${{ matrix.pipeline-version }}

    - name: run-tests
      run: |
        set -Eeuo pipefail
        exitCode=0
        # go-crane-image
        kubectl create -f ./go-crane-image/go-crane-image.yaml
        kubectl create -f ./go-crane-image/tests/run.yaml

        tkn pipelinerun logs -f go-crane-image-test-run
        tkn pipelinerun describe go-crane-image-test-run

        kubectl get pipelinerun go-crane-image-test-run
        status=$(kubectl get pipelinerun go-crane-image-test-run -o json | jq -r '.status.conditions[] | select(.type == "Succeeded") | .status')
        if [[ "${status}" != "True" ]]; then
         echo "go-crane-image test failed"
         kubectl get pipelinerun/go-crane-image-test-run -o yaml
         exitCode=1
        fi

        # go-ko-image
        kubectl create -f ./go-ko-image/go-ko-image.yaml
        kubectl create -f ./go-ko-image/tests/run.yaml

        tkn pipelinerun logs -f go-ko-image-test-run
        tkn pipelinerun describe go-ko-image-test-run

        kubectl get pipelinerun go-ko-image-test-run
        status=$(kubectl get pipelinerun go-ko-image-test-run -o json | jq -r '.status.conditions[] | select(.type == "Succeeded") | .status')
        if [[ "${status}" != "True" ]]; then
         echo "go-ko-image test failed"
         kubectl get pipelinerun/go-ko-image-test-run -o yaml
         exitCode=1
        fi

        exit $exitCode
